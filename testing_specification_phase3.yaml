apiVersion: testing.kubecore.io/v1
kind: TestingSpecification
metadata:
  name: kubecore-schema-registry-phase3-test
  version: 1.0.0
spec:
  function:
    name: function-kubecore-schema-registry
    image: kubecore/function-kubecore-schema-registry:latest
    
  inputSchema:
    apiVersion: registry.fn.crossplane.io/v1beta1
    kind: Input
    sampleInput: |
      apiVersion: registry.fn.crossplane.io/v1beta1
      kind: Input
      metadata:
        name: phase3-transitive-discovery
      phase3Features: true
      traversalConfig:
        enabled: true
        maxDepth: 3
        maxResources: 100
        timeout: "10s"
        direction: "forward"
        scopeFilter:
          platformOnly: true
          includeAPIGroups:
            - "*.kubecore.io"
          crossNamespaceEnabled: false
        batchConfig:
          enabled: true
          batchSize: 10
          maxConcurrentBatches: 3
          sameDepthBatching: true
          batchTimeout: "3s"
        cacheConfig:
          enabled: true
          ttl: "5m"
          maxSize: 1000
          strategy: "lru"
        referenceResolution:
          enableDynamicCRDs: true
          followOwnerReferences: true
          followCustomReferences: true
          skipMissingReferences: true
          minConfidenceThreshold: 0.5
          additionalPatterns:
            - pattern: "*ClusterRef"
              targetKind: "KubeCluster"
              targetGroup: "platform.kubecore.io"
              confidence: 0.9
        cycleHandling:
          detectionEnabled: true
          onCycleDetected: "continue"
          maxCycles: 10
          reportCycles: true
        performance:
          maxConcurrentRequests: 10
          requestTimeout: "2s"
          enableMetrics: true
          resourceDeduplication: true
          memoryLimits:
            maxGraphSize: 52428800  # 50MB
            maxCacheSize: 10485760  # 10MB
            gcThreshold: 83886080   # 80MB
      fetchResources:
        - into: "rootKubeCluster"
          apiVersion: "platform.kubecore.io/v1"
          kind: "KubeCluster"
          name: "dev-cluster"
          matchType: "direct"
          
  expectedOutput:
    contextKeys:
      - path: context.schemaRegistryResults
        type: object
        required: true
        description: Main results object containing all discovered resources
        
      - path: context.schemaRegistryResults.resources
        type: object
        required: true
        description: Direct resource discoveries (Phase 1 & 2 style)
        
      - path: context.schemaRegistryResults.multiResources
        type: object
        required: true
        description: Multiple resource discoveries including Phase 3 transitive discoveries
        
      - path: context.schemaRegistryResults.phase2Results
        type: object
        required: false
        description: Enhanced metadata for Phase 2/3 features
        
      - path: context.schemaRegistryResults.phase2Results.queryPlan
        type: object
        required: false
        description: Query execution plan for Phase 2/3 operations
        
      - path: context.schemaRegistryResults.discoveryStats
        type: object
        required: true
        description: Statistics about the discovery process
        
    validations:
      - type: exists
        path: context.schemaRegistryResults
        message: "Main schema registry results object must exist"
        
      - type: exists
        path: context.schemaRegistryResults.resources.rootKubeCluster
        message: "Root KubeCluster resource must be discovered"
        
      - type: contains
        path: context.schemaRegistryResults.discoveryStats.totalRequested
        value: 1
        message: "Should have requested at least 1 resource (the root)"
        
      - type: exists
        path: context.schemaRegistryResults.multiResources
        message: "Multi-resources object must exist for Phase 3 discoveries"
        
      - type: validation
        condition: "len(context.schemaRegistryResults.multiResources) > 0"
        message: "Phase 3 should discover additional resources transitively"
        
      - type: validation
        condition: "context.schemaRegistryResults.discoveryStats.successful > 0"
        message: "At least some resources should be successfully discovered"
        
      - type: exists
        path: context.schemaRegistryResults.resources.rootKubeCluster._kubecore.fetchStatus
        message: "Root resource should have fetch status metadata"
        
      - type: contains
        path: context.schemaRegistryResults.resources.rootKubeCluster._kubecore.fetchStatus
        value: "success"
        message: "Root resource fetch should be successful"
        
  testResources:
    - apiVersion: platform.kubecore.io/v1
      kind: KubeCluster
      metadata:
        name: dev-cluster
        namespace: default
        labels:
          environment: development
          tier: platform
        annotations:
          kubecore.io/managed-by: "platform-team"
      spec:
        region: us-west-2
        version: "1.28"
        nodeGroups:
          - name: workers
            instanceType: m5.large
            minSize: 2
            maxSize: 10
        kubEnvRef:
          name: dev-environment
          namespace: default
        qualityGateRef:
          name: cluster-quality-gate
          namespace: default
        
    - apiVersion: platform.kubecore.io/v1
      kind: KubEnv
      metadata:
        name: dev-environment
        namespace: default
        labels:
          environment: development
        ownerReferences:
          - apiVersion: platform.kubecore.io/v1
            kind: KubeCluster
            name: dev-cluster
            uid: "12345678-1234-1234-1234-123456789012"
      spec:
        environment: development
        region: us-west-2
        kubeSystemRef:
          name: dev-system
          namespace: default
        
    - apiVersion: platform.kubecore.io/v1
      kind: KubeSystem
      metadata:
        name: dev-system
        namespace: default
        labels:
          environment: development
        ownerReferences:
          - apiVersion: platform.kubecore.io/v1
            kind: KubEnv
            name: dev-environment
            uid: "12345678-1234-1234-1234-123456789013"
      spec:
        systemType: kubernetes
        components:
          - name: ingress-controller
            version: "1.8.0"
          - name: cert-manager
            version: "1.12.0"
        kubeNetRef:
          name: dev-network
          namespace: default
          
    - apiVersion: platform.kubecore.io/v1
      kind: KubeNet
      metadata:
        name: dev-network
        namespace: default
        labels:
          environment: development
        ownerReferences:
          - apiVersion: platform.kubecore.io/v1
            kind: KubeSystem
            name: dev-system
            uid: "12345678-1234-1234-1234-123456789014"
      spec:
        networkType: vpc
        cidr: "10.0.0.0/16"
        subnets:
          - name: public
            cidr: "10.0.1.0/24"
          - name: private
            cidr: "10.0.2.0/24"
            
    - apiVersion: platform.kubecore.io/v1
      kind: QualityGate
      metadata:
        name: cluster-quality-gate
        namespace: default
        labels:
          environment: development
      spec:
        gateType: cluster-readiness
        checks:
          - name: node-health
            threshold: "95%"
          - name: pod-success-rate
            threshold: "99%"
        githubProjectRef:
          name: platform-infrastructure
          namespace: default
          
    - apiVersion: github.platform.kubecore.io/v1
      kind: GitHubProject
      metadata:
        name: platform-infrastructure
        namespace: default
        labels:
          team: platform
          visibility: internal
      spec:
        repository: "acme-corp/platform-infrastructure"
        branch: "main"
        path: "clusters/dev"
        
  successCriteria:
    - ConfigMap created with name pattern: "function-kubecore-schema-registry-*"
    - ConfigMap contains key: "context"
    - XResource reaches Ready state within 30s
    - Output context contains: schemaRegistryResults
    - Output context contains: schemaRegistryResults.resources.rootKubeCluster
    - Output context contains: schemaRegistryResults.multiResources with Phase 3 discoveries
    - Transitive discovery finds at least 4 related resources (KubEnv, KubeSystem, KubeNet, QualityGate, GitHubProject)
    - Resource graph is built with proper parent-child relationships
    - Cycle detection runs successfully without finding cycles in test data
    - Platform scope filtering excludes non-platform resources
    - Reference resolution follows ownerReferences and custom references
    - Performance metrics are collected and included in response
    - All discovered resources have proper metadata with fetch status and Phase 3 indicators
    
  performanceRequirements:
    - Total execution time: < 10 seconds
    - Memory usage: < 100MB
    - API calls: < 50 (efficient batching and caching)
    - Transitive discovery depth: exactly 3 levels from root
    - Cache hit rate: > 80% for repeated reference resolutions
    - No resource duplication in final results
    
  testScenarios:
    - name: "Basic Phase 3 Transitive Discovery"
      description: "Test basic transitive discovery following owner references and custom references"
      expectedResourceCount: 6
      expectedDepth: 3
      
    - name: "Platform Scope Filtering"
      description: "Verify that only *.kubecore.io resources are included in traversal"
      scopeFilter:
        platformOnly: true
        includeAPIGroups: ["*.kubecore.io"]
      expectedNonPlatformResources: 0
      
    - name: "Cycle Detection"
      description: "Test cycle detection with resources that don't form cycles"
      expectedCycles: 0
      cycleHandling:
        detectionEnabled: true
        onCycleDetected: "continue"
        
    - name: "Reference Resolution"
      description: "Test resolution of both owner references and custom reference fields"
      expectedOwnerRefResolutions: 4  # KubEnv->KubeCluster, KubeSystem->KubEnv, KubeNet->KubeSystem
      expectedCustomRefResolutions: 4  # kubEnvRef, kubeSystemRef, kubeNetRef, githubProjectRef
      
    - name: "Batching and Performance"
      description: "Test that batching and caching improve performance"
      batchConfig:
        enabled: true
        batchSize: 5
        sameDepthBatching: true
      cacheConfig:
        enabled: true
        strategy: "lru"
      expectedBatches: 2
      
    - name: "Memory and Resource Limits"
      description: "Test that traversal respects memory and resource limits"
      limits:
        maxResources: 10
        maxDepth: 2
      expectedTermination: "completed"  # Should complete normally within limits
      
  errorHandling:
    - scenario: "Missing Referenced Resource"
      description: "Test behavior when a referenced resource doesn't exist"
      missingResource: "non-existent-resource"
      expectedBehavior: "continue"  # Should skip missing resources and continue
      
    - scenario: "Insufficient Permissions"
      description: "Test behavior with insufficient RBAC permissions"
      expectedBehavior: "partial_success"  # Should succeed with accessible resources
      
    - scenario: "API Timeout"
      description: "Test behavior when Kubernetes API calls timeout"
      timeout: "1s"  # Very short timeout to trigger timeouts
      expectedBehavior: "graceful_degradation"
      
    - scenario: "Memory Limit Exceeded"
      description: "Test behavior when memory limits are exceeded"
      memoryLimit: 1048576  # 1MB - very low to trigger limit
      expectedBehavior: "early_termination"
      
  cleanup:
    - "Delete all test resources"
    - "Clean up any temporary ConfigMaps"
    - "Reset function state"