# Phase 1 Composition - Schema Registry Function Validation
# This composition creates a simple XGitHubProject that references the demo-project
# to test the context extraction capabilities of the function
---
# Composition using the Schema Registry Function
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: schema-registry
  labels:
    provider: kubecore
    component: schema-registry
spec:
  compositeTypeRef:
    apiVersion: platform.kubecore.io/v1alpha1
    kind: XSchemaRegistry

  mode: Pipeline
  pipeline:
  - step: context-extraction
    functionRef:
      name: function-kubecore-schema-registry
    input:
      apiVersion: template.fn.crossplane.io/v1beta1
      kind: Input
      spec:
        enableTransitiveDiscovery: true
        traversalDepth: 3

  # ConfigMap resource using Kubernetes provider
  - step: create-configmap
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{ $ctx := .observed.composite.resource }}
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: Object
          metadata:
            name: {{ $ctx.metadata.name }}-context
            annotations:
              crossplane.io/external-name: {{ $ctx.metadata.name }}-context
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: {{ $ctx.metadata.name }}-context
                  namespace: {{ $ctx.spec.githubProjectRef.namespace | default "default" }}
                data:
                  resourceType: "{{ $ctx.kind }}"
                  resourceName: "{{ $ctx.metadata.name }}"
                  githubProjectRef: "{{ $ctx.spec.githubProjectRef.name }}"
                  transitiveDiscovery: "{{ $ctx.spec.enableTransitiveDiscovery }}"
            providerConfigRef:
              name: default
