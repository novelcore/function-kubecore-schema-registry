apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: schema-registry-template-fixed
  labels:
    provider: kubecore
    type: schema-registry
spec:
  compositeTypeRef:
    apiVersion: platform.kubecore.io/v1alpha1
    kind: XSchemaRegistry
  mode: Pipeline
  pipeline:
  - step: schema-discovery
    functionRef:
      name: function-kubecore-schema-registry
    input:
      apiVersion: kubecore.platform.io/v1beta1
      kind: Input
      enableTransitiveDiscovery: true
      traversalDepth: 3
      includeFullSchema: true

  - step: generate-resource-inventory
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{ $ctx := .observed.composite.resource }}
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: Object
          metadata:
            name: {{ $ctx.metadata.name }}-inventory
            annotations:
              crossplane.io/external-name: {{ $ctx.metadata.name }}-inventory
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $ctx.metadata.name }}-inventory
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: {{ $ctx.metadata.name }}-inventory
                  namespace: {{ $ctx.metadata.namespace | default "default" }}
                  labels:
                    app.kubernetes.io/name: schema-registry-inventory
                    app.kubernetes.io/instance: {{ $ctx.metadata.name }}
                    schema-registry.kubecore.io/source: "{{ .context.schemaRegistryResults.discoveryStats.executionTimeMs }}ms"
                data:
                  # Resource Discovery Summary
                  discovery-summary.yaml: |
                    apiVersion: inventory.kubecore.io/v1alpha1
                    kind: ResourceInventory
                    metadata:
                      name: {{ $ctx.metadata.name }}
                      createdAt: {{ now | date "2006-01-02T15:04:05Z" }}
                    spec:
                      totalResourcesFound: {{ .context.schemaRegistryResults.discoveryStats.totalResourcesFound }}
                      totalSchemasRetrieved: {{ .context.schemaRegistryResults.discoveryStats.totalSchemasRetrieved }}
                      maxDepthReached: {{ .context.schemaRegistryResults.discoveryStats.maxDepthReached }}
                      executionTimeMs: {{ .context.schemaRegistryResults.discoveryStats.executionTimeMs }}
                      resources:
                  {{- range .context.schemaRegistryResults.discoveredResources }}
                      - name: {{ .name }}
                        kind: {{ .kind }}
                        apiVersion: {{ .apiVersion }}
                        namespace: {{ .namespace | default "" }}
                        referencedBy: {{ .referencedBy }}
                        depth: {{ .depth }}
                        source: {{ .source }}
                  {{- if .parentResource }}
                        parentResource: {{ .parentResource }}
                  {{- end }}
                  {{- end }}
                      referenceChains:
                  {{- range .context.schemaRegistryResults.referenceChains }}
                      - path: "{{ .path }}"
                        resources: {{ .resources }}
                        kinds: {{ .kinds | default list }}
                  {{- end }}
                  
                  # Generate individual resource configs based on discovered resources
                  {{- range .context.schemaRegistryResults.discoveredResources }}
                  resource-{{ .name | replace "[" "-" | replace "]" "-" | replace "." "-" }}.yaml: |
                    apiVersion: v1
                    kind: ConfigMap
                    metadata:
                      name: resource-{{ .name | replace "[" "-" | replace "]" "-" | replace "." "-" }}-config
                      labels:
                        resource.kubecore.io/kind: {{ .kind }}
                        resource.kubecore.io/source: {{ .source }}
                        resource.kubecore.io/depth: "{{ .depth }}"
                    data:
                      name: {{ .name }}
                      kind: {{ .kind }}
                      apiVersion: {{ .apiVersion }}
                      namespace: {{ .namespace | default "" }}
                      referencedBy: {{ .referencedBy }}
                      depth: "{{ .depth }}"
                      source: {{ .source }}
                  {{- if .parentResource }}
                      parentResource: {{ .parentResource }}
                  {{- end }}
                  {{- end }}
                  
                  # Generate schema documentation
                  schema-documentation.md: |
                    # Resource Schema Documentation
                    
                    Generated from schema registry discovery on {{ now | date "2006-01-02 15:04:05" }}
                    
                    ## Discovery Statistics
                    - **Total Resources Found**: {{ .context.schemaRegistryResults.discoveryStats.totalResourcesFound }}
                    - **Total Schemas Retrieved**: {{ .context.schemaRegistryResults.discoveryStats.totalSchemasRetrieved }}
                    - **Max Depth Reached**: {{ .context.schemaRegistryResults.discoveryStats.maxDepthReached }}
                    - **Execution Time**: {{ .context.schemaRegistryResults.discoveryStats.executionTimeMs }}ms
                    
                    ## Discovered Resources
                    
                  {{- range .context.schemaRegistryResults.discoveredResources }}
                    ### {{ .name }} ({{ .kind }})
                    - **API Version**: `{{ .apiVersion }}`
                    - **Namespace**: {{ .namespace | default "cluster-scoped" }}
                    - **Referenced By**: `{{ .referencedBy }}`
                    - **Discovery Depth**: {{ .depth }}
                    - **Discovery Source**: {{ .source }}
                  {{- if .parentResource }}
                    - **Parent Resource**: {{ .parentResource }}
                  {{- end }}
                  {{- end }}
                    
                    ## Reference Chains
                    
                  {{- range .context.schemaRegistryResults.referenceChains }}
                    ### {{ .path }}
                    ```
                  {{- if .resources }}
                    {{- range $i, $resource := .resources }}
                    {{- if $i }} -> {{ end }}{{ $resource }}
                    {{- end }}
                  {{- else }}
                    Empty chain
                  {{- end }}
                    ```
                  {{- end }}
                    
                    ## Resource Schemas
                    
                  {{- range $kind, $schema := .context.schemaRegistryResults.resourceSchemas }}
                    ### {{ $kind }}
                    - **API Version**: `{{ $schema.apiVersion }}`
                    - **Required Fields**: {{ $schema.requiredFields }}
                  {{- if $schema.referenceFields }}
                    - **Reference Fields**:
                  {{- range $schema.referenceFields }}
                      - `{{ .name }}` -> {{ .targetKind }} (required: {{ .required }})
                  {{- end }}
                  {{- end }}
                  {{- end }}
            providerConfigRef:
              name: kubesys-enhanced

  # Removed generate-resource-specific-configs step - all information is now in the inventory ConfigMap

  - step: generate-monitoring-configs
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |+
          {{ $ctx := .observed.composite.resource }}
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: Object
          metadata:
            name: {{ $ctx.metadata.name }}-monitoring
            annotations:
              crossplane.io/external-name: {{ $ctx.metadata.name }}-monitoring
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $ctx.metadata.name }}-monitoring
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: {{ $ctx.metadata.name }}-monitoring
                  namespace: {{ $ctx.metadata.namespace | default "default" }}
                  labels:
                    app.kubernetes.io/name: schema-registry-monitoring
                    app.kubernetes.io/instance: {{ $ctx.metadata.name }}
                data:
                  prometheus-rules.yaml: |
                    groups:
                    - name: schema-registry-{{ $ctx.metadata.name }}
                      rules:
                      - alert: SchemaRegistryDiscoveryTime
                        expr: schema_registry_execution_time_ms > 1000
                        for: 5m
                        labels:
                          severity: warning
                          resource: {{ $ctx.metadata.name }}
                        annotations:
                          summary: "Schema registry discovery taking too long"
                          description: "Schema discovery for {{ $ctx.metadata.name }} took {{ .context.schemaRegistryResults.discoveryStats.executionTimeMs }}ms"
                      
                      - alert: SchemaRegistryResourceCount
                        expr: schema_registry_resources_found == 0
                        for: 1m
                        labels:
                          severity: critical
                          resource: {{ $ctx.metadata.name }}
                        annotations:
                          summary: "No resources discovered by schema registry"
                          description: "Schema registry for {{ $ctx.metadata.name }} found no resources"
                  
                  grafana-dashboard.json: |
                    {
                      "dashboard": {
                        "title": "Schema Registry - {{ $ctx.metadata.name }}",
                        "panels": [
                          {
                            "title": "Discovery Statistics",
                            "type": "stat",
                            "targets": [
                              {
                                "expr": "schema_registry_resources_found{resource=\"{{ $ctx.metadata.name }}\"}"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  
                  metrics.yaml: |
                    # Metrics for schema registry discovery
                    schema_registry_execution_time_ms{{ "{" }}resource="{{ $ctx.metadata.name }}"{{ "}" }} {{ .context.schemaRegistryResults.discoveryStats.executionTimeMs }}
                    schema_registry_resources_found{{ "{" }}resource="{{ $ctx.metadata.name }}"{{ "}" }} {{ .context.schemaRegistryResults.discoveryStats.totalResourcesFound }}
                    schema_registry_schemas_retrieved{{ "{" }}resource="{{ $ctx.metadata.name }}"{{ "}" }} {{ .context.schemaRegistryResults.discoveryStats.totalSchemasRetrieved }}
                    schema_registry_max_depth{{ "{" }}resource="{{ $ctx.metadata.name }}"{{ "}" }} {{ .context.schemaRegistryResults.discoveryStats.maxDepthReached }}
            providerConfigRef:
              name: kubesys-enhanced
              
  # Auto-Ready Function (Aggregate child resource readiness)
  - step: auto-ready
    functionRef:
      name: function-auto-ready
    input:
      apiVersion: autoready.fn.crossplane.io/v1beta1
      kind: Input
