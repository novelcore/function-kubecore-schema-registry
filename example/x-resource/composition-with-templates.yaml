apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: schema-registry-template-demo
  labels:
    provider: kubecore
    type: schema-registry
spec:
  compositeTypeRef:
    apiVersion: platform.kubecore.io/v1alpha1
    kind: XSchemaRegistry
  mode: Pipeline
  pipeline:
  - step: schema-discovery
    functionRef:
      name: function-kubecore-schema-registry
    input:
      apiVersion: kubecore.platform.io/v1beta1
      kind: Input
      enableTransitiveDiscovery: true
      traversalDepth: 3
      includeFullSchema: true

  - step: generate-resource-inventory
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: {{ .observed.composite.resource.metadata.name }}-inventory
            namespace: {{ .observed.composite.resource.metadata.namespace | default "default" }}
            labels:
              app.kubernetes.io/name: schema-registry-inventory
              app.kubernetes.io/instance: {{ .observed.composite.resource.metadata.name }}
              schema-registry.kubecore.io/source: "{{ .context.schemaRegistryResults.discoveryStats.executionTimeMs }}ms"
          data:
            # Resource Discovery Summary
            discovery-summary.yaml: |
              apiVersion: inventory.kubecore.io/v1alpha1
              kind: ResourceInventory
              metadata:
                name: {{ .observed.composite.resource.metadata.name }}
                createdAt: {{ now | date "2006-01-02T15:04:05Z" }}
              spec:
                totalResourcesFound: {{ .context.schemaRegistryResults.discoveryStats.totalResourcesFound }}
                totalSchemasRetrieved: {{ .context.schemaRegistryResults.discoveryStats.totalSchemasRetrieved }}
                maxDepthReached: {{ .context.schemaRegistryResults.discoveryStats.maxDepthReached }}
                executionTimeMs: {{ .context.schemaRegistryResults.discoveryStats.executionTimeMs }}
                resources:
          {{ range .context.schemaRegistryResults.discoveredResources }}      - name: {{ .name }}
                  kind: {{ .kind }}
                  apiVersion: {{ .apiVersion }}
                  namespace: {{ .namespace | default "" }}
                  referencedBy: {{ .referencedBy }}
                  depth: {{ .depth }}
                  source: {{ .source }}
          {{ if .parentResource }}        parentResource: {{ .parentResource }}
          {{ end }}{{ end }}
                referenceChains:
          {{ range .context.schemaRegistryResults.referenceChains }}      - path: "{{ .path }}"
                  resources: {{ .resources }}
                  kinds: {{ .kinds }}
          {{ end }}
            
            # Generate individual resource configs based on discovered resources
          {{ range .context.schemaRegistryResults.discoveredResources }}
            resource-{{ .name }}.yaml: |
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: resource-{{ .name }}-config
                labels:
                  resource.kubecore.io/kind: {{ .kind }}
                  resource.kubecore.io/source: {{ .source }}
                  resource.kubecore.io/depth: "{{ .depth }}"
              data:
                name: {{ .name }}
                kind: {{ .kind }}
                apiVersion: {{ .apiVersion }}
                namespace: {{ .namespace | default "" }}
                referencedBy: {{ .referencedBy }}
                depth: "{{ .depth }}"
                source: {{ .source }}
          {{ if .parentResource }}      parentResource: {{ .parentResource }}
          {{ end }}{{ end }}
            
            # Generate schema documentation
            schema-documentation.md: |
              # Resource Schema Documentation
              
              Generated from schema registry discovery on {{ now | date "2006-01-02 15:04:05" }}
              
              ## Discovery Statistics
              - **Total Resources Found**: {{ .context.schemaRegistryResults.discoveryStats.totalResourcesFound }}
              - **Total Schemas Retrieved**: {{ .context.schemaRegistryResults.discoveryStats.totalSchemasRetrieved }}
              - **Max Depth Reached**: {{ .context.schemaRegistryResults.discoveryStats.maxDepthReached }}
              - **Execution Time**: {{ .context.schemaRegistryResults.discoveryStats.executionTimeMs }}ms
              
              ## Discovered Resources
              
          {{ range .context.schemaRegistryResults.discoveredResources }}### {{ .name }} ({{ .kind }})
              - **API Version**: `{{ .apiVersion }}`
              - **Namespace**: {{ .namespace | default "cluster-scoped" }}
              - **Referenced By**: `{{ .referencedBy }}`
              - **Discovery Depth**: {{ .depth }}
              - **Discovery Source**: {{ .source }}
          {{ if .parentResource }}    - **Parent Resource**: {{ .parentResource }}
          {{ end }}
          {{ end }}
              ## Reference Chains
              
          {{ range .context.schemaRegistryResults.referenceChains }}### {{ .path }}
              ```
              {{ range $i, $resource := .resources }}{{ if $i }} -> {{ end }}{{ $resource }} ({{ index $.context.schemaRegistryResults.referenceChains 0 .kinds $i }}){{ end }}
              ```
          {{ end }}
              ## Resource Schemas
              
          {{ range $kind, $schema := .context.schemaRegistryResults.resourceSchemas }}### {{ $kind }}
              - **API Version**: `{{ $schema.apiVersion }}`
              - **Required Fields**: {{ $schema.requiredFields }}
          {{ if $schema.referenceFields }}    - **Reference Fields**:
          {{ range $schema.referenceFields }}      - `{{ .name }}` -> {{ .targetKind }} (required: {{ .required }})
          {{ end }}{{ end }}
          {{ end }}

  - step: generate-resource-specific-configs
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{ $githubProjects := index .context.schemaRegistryResults.resourcesByKind "GitHubProject" }}
          {{ if $githubProjects }}
          {{ range $githubProjects }}
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: {{ .name }}-github-credentials
            namespace: {{ .namespace | default "default" }}
            labels:
              app.kubernetes.io/name: github-project-credentials
              app.kubernetes.io/instance: {{ .name }}
              resource.kubecore.io/kind: {{ .kind }}
              resource.kubecore.io/managed-by: schema-registry
          type: Opaque
          data:
            project-name: {{ .name | b64enc }}
            api-version: {{ .apiVersion | b64enc }}
            discovery-depth: {{ .depth | toString | b64enc }}
          {{ end }}
          {{ end }}

          {{ $githubProviders := index .context.schemaRegistryResults.resourcesByKind "GithubProvider" }}
          {{ if $githubProviders }}
          {{ range $githubProviders }}
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: {{ .name }}-provider-config
            namespace: default
            labels:
              app.kubernetes.io/name: github-provider-config
              app.kubernetes.io/instance: {{ .name }}
              resource.kubecore.io/kind: {{ .kind }}
              resource.kubecore.io/parent: {{ .parentResource }}
          data:
            provider-name: {{ .name }}
            api-version: {{ .apiVersion }}
            parent-resource: {{ .parentResource }}
            discovery-source: {{ .source }}
          {{ end }}
          {{ end }}

  - step: generate-monitoring-configs
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: {{ .observed.composite.resource.metadata.name }}-monitoring
            namespace: {{ .observed.composite.resource.metadata.namespace | default "default" }}
            labels:
              app.kubernetes.io/name: schema-registry-monitoring
              app.kubernetes.io/instance: {{ .observed.composite.resource.metadata.name }}
          data:
            prometheus-rules.yaml: |
              groups:
              - name: schema-registry-{{ .observed.composite.resource.metadata.name }}
                rules:
                - alert: SchemaRegistryDiscoveryTime
                  expr: schema_registry_execution_time_ms > 1000
                  for: 5m
                  labels:
                    severity: warning
                    resource: {{ .observed.composite.resource.metadata.name }}
                  annotations:
                    summary: "Schema registry discovery taking too long"
                    description: "Schema discovery for {{ .observed.composite.resource.metadata.name }} took {{ .context.schemaRegistryResults.discoveryStats.executionTimeMs }}ms"
                
                - alert: SchemaRegistryResourceCount
                  expr: schema_registry_resources_found == 0
                  for: 1m
                  labels:
                    severity: critical
                    resource: {{ .observed.composite.resource.metadata.name }}
                  annotations:
                    summary: "No resources discovered by schema registry"
                    description: "Schema registry for {{ .observed.composite.resource.metadata.name }} found no resources"
            
            grafana-dashboard.json: |
              {
                "dashboard": {
                  "title": "Schema Registry - {{ .observed.composite.resource.metadata.name }}",
                  "panels": [
                    {
                      "title": "Discovery Statistics",
                      "type": "stat",
                      "targets": [
                        {
                          "expr": "schema_registry_resources_found{resource=\"{{ .observed.composite.resource.metadata.name }}\"}"
                        }
                      ]
                    }
                  ]
                }
              }
            
            metrics.yaml: |
              # Metrics for schema registry discovery
              schema_registry_execution_time_ms{{ "{" }}resource="{{ .observed.composite.resource.metadata.name }}"{{ "}" }} {{ .context.schemaRegistryResults.discoveryStats.executionTimeMs }}
              schema_registry_resources_found{{ "{" }}resource="{{ .observed.composite.resource.metadata.name }}"{{ "}" }} {{ .context.schemaRegistryResults.discoveryStats.totalResourcesFound }}
              schema_registry_schemas_retrieved{{ "{" }}resource="{{ .observed.composite.resource.metadata.name }}"{{ "}" }} {{ .context.schemaRegistryResults.discoveryStats.totalSchemasRetrieved }}
              schema_registry_max_depth{{ "{" }}resource="{{ .observed.composite.resource.metadata.name }}"{{ "}" }} {{ .context.schemaRegistryResults.discoveryStats.maxDepthReached }}
  # Auto-Ready Function (Aggregate child resource readiness)
  - step: auto-ready
    functionRef:
      name: function-auto-ready
    input:
      apiVersion: autoready.fn.crossplane.io/v1beta1
      kind: Input
